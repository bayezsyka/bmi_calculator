
=== FILE: config.php ===

<?php
// config.php - Database configuration

// Database connection parameters
$dbHost = 'localhost';  // Database host
$dbName = 'bmi_tracker'; // Database name
$dbUser = 'root';       // Database username
$dbPass = '';           // Database password - leave empty for default XAMPP/WAMP setup

// Create database connection function
function createConnection() {
    global $dbHost, $dbName, $dbUser, $dbPass;
    
    try {
        $conn = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
        // Set the PDO error mode to exception
        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        return $conn;
    } catch(PDOException $e) {
        // If database doesn't exist, try to create it
        if ($e->getCode() == 1049) { // 1049 is MySQL error code for "Unknown database"
            try {
                // Connect without database
                $tempConn = new PDO("mysql:host=$dbHost", $dbUser, $dbPass);
                $tempConn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
                
                // Create database
                $tempConn->exec("CREATE DATABASE IF NOT EXISTS `$dbName` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci");
                
                // Connect with the newly created database
                $conn = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
                $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
                
                // Create table
                createTables($conn);
                
                return $conn;
            } catch(PDOException $e2) {
                die("Connection failed: " . $e2->getMessage());
            }
        } else {
            die("Connection failed: " . $e->getMessage());
        }
    }
}

// Create necessary tables if they don't exist
function createTables($conn) {
    try {
        // SQL to create bmi_records table
        $sql = "CREATE TABLE IF NOT EXISTS `bmi_records` (
            `id` INT(11) NOT NULL AUTO_INCREMENT,
            `nama` VARCHAR(100) NOT NULL,
            `usia` INT(3) NOT NULL,
            `jenis_kelamin` VARCHAR(10) NOT NULL,
            `berat` DECIMAL(5,1) NOT NULL,
            `tinggi` DECIMAL(5,1) NOT NULL,
            `bmi` DECIMAL(4,1) NOT NULL,
            `kategori` VARCHAR(50) NOT NULL,
            `tanggal` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (`id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;";
        
        // Execute SQL
        $conn->exec($sql);
    } catch(PDOException $e) {
        die("Error creating tables: " . $e->getMessage());
    }
}

// Helper function to return JSON response
function jsonResponse($status, $message = '', $data = null) {
    header('Content-Type: application/json');
    $response = ['status' => $status];
    
    if (!empty($message)) {
        $response['message'] = $message;
    }
    
    if ($data !== null) {
        $response['data'] = $data;
    }
    
    echo json_encode($response);
    exit;
}


=== FILE: export-semua-isi.txt ===

=== FILE: config.php ===

<?php
// config.php - Database configuration

// Database connection parameters
$dbHost = 'localhost';  // Database host
$dbName = 'bmi_tracker'; // Database name
$dbUser = 'root';       // Database username
$dbPass = '';           // Database password - leave empty for default XAMPP/WAMP setup

// Create database connection function
function createConnection() {
    global $dbHost, $dbName, $dbUser, $dbPass;
    
    try {
        $conn = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
        // Set the PDO error mode to exception
        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        return $conn;
    } catch(PDOException $e) {
        // If database doesn't exist, try to create it
        if ($e->getCode() == 1049) { // 1049 is MySQL error code for "Unknown database"
            try {
                // Connect without database
                $tempConn = new PDO("mysql:host=$dbHost", $dbUser, $dbPass);
                $tempConn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
                
                // Create database
                $tempConn->exec("CREATE DATABASE IF NOT EXISTS `$dbName` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci");
                
                // Connect with the newly created database
                $conn = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
                $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
                
                // Create table
                createTables($conn);
                
                return $conn;
            } catch(PDOException $e2) {
                die("Connection failed: " . $e2->getMessage());
            }
        } else {
            die("Connection failed: " . $e->getMessage());
        }
    }
}

// Create necessary tables if they don't exist
function createTables($conn) {
    try {
        // SQL to create bmi_records table
        $sql = "CREATE TABLE IF NOT EXISTS `bmi_records` (
            `id` INT(11) NOT NULL AUTO_INCREMENT,
            `nama` VARCHAR(100) NOT NULL,
            `usia` INT(3) NOT NULL,
            `jenis_kelamin` VARCHAR(10) NOT NULL,
            `berat` DECIMAL(5,1) NOT NULL,
            `tinggi` DECIMAL(5,1) NOT NULL,
            `bmi` DECIMAL(4,1) NOT NULL,
            `kategori` VARCHAR(50) NOT NULL,
            `tanggal` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (`id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;";
        
        // Execute SQL
        $conn->exec($sql);
    } catch(PDOException $e) {
        die("Error creating tables: " . $e->getMessage());
    }
}

// Helper function to return JSON response
function jsonResponse($status, $message = '', $data = null) {
    header('Content-Type: application/json');
    $response = ['status' => $status];
    
    if (!empty($message)) {
        $response['message'] = $message;
    }
    
    if ($data !== null) {
        $response['data'] = $data;
    }
    
    echo json_encode($response);
    exit;
}





=== FILE: index.html ===
<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BMI Health Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-center text-gray-800 mb-8">BMI Health Tracker</h1>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Kalkulator BMI Card -->
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="bg-blue-500 text-white p-4">
                    <h2 class="text-xl font-bold">Kalkulator BMI</h2>
                    <p class="text-sm">Masukkan data Anda untuk menghitung BMI Anda</p>
                </div>
                <div class="p-4">
                    <form id="bmiForm" class="space-y-4">
                        <div>
                            <label for="nama" class="block text-gray-700 mb-1">Nama</label>
                            <input type="text" id="nama" name="nama" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                        </div>
                        
                        <div>
                            <label for="usia" class="block text-gray-700 mb-1">Usia (tahun)</label>
                            <input type="number" id="usia" name="usia" min="1" max="120" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                        </div>
                        
                        <div>
                            <label for="jenisKelamin" class="block text-gray-700 mb-1">Jenis Kelamin</label>
                            <select id="jenisKelamin" name="jenisKelamin" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                                <option value="">Pilih jenis kelamin</option>
                                <option value="Pria">Pria</option>
                                <option value="Wanita">Wanita</option>
                            </select>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label for="berat" class="block text-gray-700 mb-1">Berat Badan (kg)</label>
                                <input type="number" id="berat" name="berat" step="0.1" min="20" max="300" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                            </div>
                            
                            <div>
                                <label for="tinggi" class="block text-gray-700 mb-1">Tinggi Badan (cm)</label>
                                <input type="number" id="tinggi" name="tinggi" step="0.1" min="50" max="250" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                            </div>
                        </div>
                        
                        <button type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition duration-200">
                            Hitung BMI
                        </button>
                    </form>
                </div>
            </div>
            
            <!-- Riwayat BMI Card -->
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="bg-blue-500 text-white p-4">
                    <h2 class="text-xl font-bold">Riwayat BMI</h2>
                    <p class="text-sm">Riwayat cek BMI Anda</p>
                </div>
                <div class="p-4">
                    <div class="overflow-x-auto">
                        <table id="bmiHistory" class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">NAMA</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">USIA/JENIS KELAMIN</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">TANGGAL</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">BMI</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">KATEGORI</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">AKSI</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200" id="historyData">
                                <!-- Data will be loaded dynamically -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="mt-8 text-center text-gray-600 text-sm">
            <p>Penghitung BMI ini memberikan informasi kesehatan umum dan bukan pengganti saran medis profesional.</p>
            <p>Semua data disimpan secara lokal di perangkat Anda. Tidak ada informasi yang dikirim ke server mana pun.</p>
        </div>
    </div>

    <!-- Modal Container -->
    <div id="modalContainer" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md mx-4">
            <div class="flex justify-between items-center mb-4">
                <h3 id="modalTitle" class="text-xl font-bold text-gray-800"></h3>
                <button id="closeModal" class="text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div id="modalBody" class="mb-4"></div>
            <div id="modalFooter" class="flex justify-end">
                <button id="modalConfirm" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded mr-2">
                    OK
                </button>
                <button id="modalCancel" class="hidden bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded">
                    Batal
                </button>
            </div>
        </div>
    </div>

    <script src="js/script.js"></script>
</body>
</html>


=== FILE: api\delete_bmi.php ===
<?php
// api/delete_bmi.php - Delete BMI record from database

// Include database configuration
require_once '../config.php';

// Check if request method is POST
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    jsonResponse('error', 'Invalid request method');
}

// Get record ID
$id = filter_input(INPUT_POST, 'id', FILTER_VALIDATE_INT);

// Validate ID
if (!$id) {
    jsonResponse('error', 'Invalid record ID');
}

try {
    // Create database connection
    $conn = createConnection();
    
    // Prepare SQL statement
    $stmt = $conn->prepare("DELETE FROM bmi_records WHERE id = :id");
    
    // Bind parameter
    $stmt->bindParam(':id', $id);
    
    // Execute statement
    $stmt->execute();
    
    // Check if record was deleted
    if ($stmt->rowCount() > 0) {
        jsonResponse('success', 'Record deleted successfully');
    } else {
        jsonResponse('error', 'Record not found');
    }
    
} catch(PDOException $e) {
    jsonResponse('error', 'Database error: ' . $e->getMessage());
}


=== FILE: api\get_bmi_history.php ===
<?php
// api/get_bmi_history.php - Get BMI history from database

// Include database configuration
require_once '../config.php';

// Check if request method is GET
if ($_SERVER['REQUEST_METHOD'] !== 'GET') {
    jsonResponse('error', 'Invalid request method');
}

try {
    // Create database connection
    $conn = createConnection();
    
    // Prepare SQL statement
    $stmt = $conn->prepare("SELECT * FROM bmi_records ORDER BY tanggal DESC");
    
    // Execute statement
    $stmt->execute();
    
    // Fetch all records
    $records = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    // Return records as JSON
    jsonResponse('success', '', $records);
    
} catch(PDOException $e) {
    jsonResponse('error', 'Database error: ' . $e->getMessage());
}


=== FILE: api\save_bmi.php ===
<?php
// api/save_bmi.php - Save BMI record to database

// Include database configuration
require_once '../config.php';

// Check if request method is POST
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    jsonResponse('error', 'Invalid request method');
}

// Get form data
$nama = filter_input(INPUT_POST, 'nama', FILTER_SANITIZE_STRING);
$usia = filter_input(INPUT_POST, 'usia', FILTER_VALIDATE_INT);
$jenis_kelamin = filter_input(INPUT_POST, 'jenis_kelamin', FILTER_SANITIZE_STRING);
$berat = filter_input(INPUT_POST, 'berat', FILTER_VALIDATE_FLOAT);
$tinggi = filter_input(INPUT_POST, 'tinggi', FILTER_VALIDATE_FLOAT);
$bmi = filter_input(INPUT_POST, 'bmi', FILTER_VALIDATE_FLOAT);
$kategori = filter_input(INPUT_POST, 'kategori', FILTER_SANITIZE_STRING);

// Validate required fields
if (!$nama || !$usia || !$jenis_kelamin || !$berat || !$tinggi || !$bmi || !$kategori) {
    jsonResponse('error', 'Semua field harus diisi!');
}

// Additional validation
if ($usia < 1 || $usia > 120) {
    jsonResponse('error', 'Usia harus antara 1-120 tahun');
}

if ($berat < 20 || $berat > 300) {
    jsonResponse('error', 'Berat badan harus antara 20-300 kg');
}

if ($tinggi < 50 || $tinggi > 250) {
    jsonResponse('error', 'Tinggi badan harus antara 50-250 cm');
}

try {
    // Create database connection
    $conn = createConnection();
    
    // Prepare SQL statement
    $stmt = $conn->prepare("INSERT INTO bmi_records (nama, usia, jenis_kelamin, berat, tinggi, bmi, kategori) 
                           VALUES (:nama, :usia, :jenis_kelamin, :berat, :tinggi, :bmi, :kategori)");
    
    // Bind parameters
    $stmt->bindParam(':nama', $nama);
    $stmt->bindParam(':usia', $usia);
    $stmt->bindParam(':jenis_kelamin', $jenis_kelamin);
    $stmt->bindParam(':berat', $berat);
    $stmt->bindParam(':tinggi', $tinggi);
    $stmt->bindParam(':bmi', $bmi);
    $stmt->bindParam(':kategori', $kategori);
    
    // Execute statement
    $stmt->execute();
    
    // Return success response
    jsonResponse('success', 'Data BMI berhasil disimpan', ['id' => $conn->lastInsertId()]);
    
} catch(PDOException $e) {
    jsonResponse('error', 'Database error: ' . $e->getMessage());
}


=== FILE: js\script.js ===
// script.js - BMI Tracker JavaScript functionality

document.addEventListener('DOMContentLoaded', function() {
    // Load BMI history on page load
    loadBMIHistory();
    
    // Handle form submission
    document.getElementById('bmiForm').addEventListener('submit', function(e) {
        e.preventDefault();
        calculateBMI();
    });
    
    // Modal event listeners
    document.getElementById('closeModal').addEventListener('click', closeModal);
    document.getElementById('modalConfirm').addEventListener('click', closeModal);
    document.getElementById('modalCancel').addEventListener('click', closeModal);
});

// Calculate BMI and handle form submission
function calculateBMI() {
    const nama = document.getElementById('nama').value;
    const usia = document.getElementById('usia').value;
    const jenisKelamin = document.getElementById('jenisKelamin').value;
    const berat = parseFloat(document.getElementById('berat').value);
    const tinggi = parseFloat(document.getElementById('tinggi').value);
    
    // Validate inputs
    if (!nama || !usia || !jenisKelamin || !berat || !tinggi) {
        showModal('Error', 'Semua field harus diisi!');
        return;
    }
    
    // Calculate BMI: weight(kg) / (height(m))Â²
    const tinggiMeter = tinggi / 100;
    const bmiValue = berat / (tinggiMeter * tinggiMeter);
    const bmiRounded = Math.round(bmiValue * 10) / 10;
    
    // Determine BMI category
    let kategori = '';
    let textColor = '';
    
    if (bmiRounded < 18.5) {
        kategori = 'Kekurangan Berat Badan';
        textColor = 'text-blue-500';
    } else if (bmiRounded >= 18.5 && bmiRounded < 25) {
        kategori = 'Normal';
        textColor = 'text-green-500';
    } else if (bmiRounded >= 25 && bmiRounded < 30) {
        kategori = 'Kelebihan Berat Badan';
        textColor = 'text-yellow-500';
    } else {
        kategori = 'Obesitas';
        textColor = 'text-red-500';
    }
    
    // Save to database via AJAX
    $.ajax({
        url: 'api/save_bmi.php',
        type: 'POST',
        data: {
            nama: nama,
            usia: usia,
            jenisKelamin: jenisKelamin,
            berat: berat,
            tinggi: tinggi,
            bmi: bmiRounded,
            kategori: kategori
        },
        success: function(response) {
            try {
                const result = JSON.parse(response);
                if (result.status === 'success') {
                    // Show BMI result in modal
                    let message = `
                        <div class="text-center">
                            <div class="text-xl mb-2">BMI Anda: <span class="font-bold ${textColor}">${bmiRounded}</span></div>
                            <div class="text-lg mb-4">Kategori: <span class="font-bold ${textColor}">${kategori}</span></div>
                            <div class="bg-gray-100 p-4 rounded-lg">
                                <p class="text-sm mb-2">Interpretasi BMI:</p>
                                <ul class="text-sm text-left list-disc pl-5">
                                    <li><span class="text-blue-500 font-medium">Kurang dari 18.5:</span> Kekurangan berat badan</li>
                                    <li><span class="text-green-500 font-medium">18.5 - 24.9:</span> Normal</li>
                                    <li><span class="text-yellow-500 font-medium">25 - 29.9:</span> Kelebihan berat badan</li>
                                    <li><span class="text-red-500 font-medium">30 atau lebih:</span> Obesitas</li>
                                </ul>
                            </div>
                        </div>
                    `;
                    showModal('Hasil BMI', message);
                    
                    // Reset form
                    document.getElementById('bmiForm').reset();
                    
                    // Reload BMI history
                    loadBMIHistory();
                } else {
                    showModal('Error', result.message || 'Terjadi kesalahan saat menyimpan data.');
                }
            } catch (e) {
                showModal('Error', 'Terjadi kesalahan pada server.');
            }
        },
        error: function() {
            showModal('Error', 'Gagal terhubung ke server.');
        }
    });
}

// Load BMI history from database
function loadBMIHistory() {
    $.ajax({
        url: 'api/get_bmi_history.php',
        type: 'GET',
        success: function(response) {
            try {
                const result = JSON.parse(response);
                if (result.status === 'success') {
                    displayBMIHistory(result.data);
                } else {
                    console.error('Failed to load BMI history:', result.message);
                }
            } catch (e) {
                console.error('Error parsing server response:', e);
            }
        },
        error: function() {
            console.error('Failed to connect to server.');
        }
    });
}

// Display BMI history in table
function displayBMIHistory(data) {
    const tableBody = document.getElementById('historyData');
    tableBody.innerHTML = '';
    
    if (data.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td colspan="6" class="px-6 py-4 text-center text-gray-500">
                Belum ada data BMI tersimpan
            </td>
        `;
        tableBody.appendChild(row);
        return;
    }
    
    data.forEach(function(item) {
        let textColorClass = '';
        
        if (item.kategori === 'Kekurangan Berat Badan') {
            textColorClass = 'text-blue-500';
        } else if (item.kategori === 'Normal') {
            textColorClass = 'text-green-500';
        } else if (item.kategori === 'Kelebihan Berat Badan') {
            textColorClass = 'text-yellow-500';
        } else if (item.kategori === 'Obesitas') {
            textColorClass = 'text-red-500';
        }
        
        const row = document.createElement('tr');
        row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap">${item.nama}</td>
            <td class="px-6 py-4 whitespace-nowrap">${item.usia} / ${item.jenis_kelamin}</td>
            <td class="px-6 py-4 whitespace-nowrap">${formatDate(item.tanggal)}</td>
            <td class="px-6 py-4 whitespace-nowrap font-bold">${item.bmi}</td>
            <td class="px-6 py-4 whitespace-nowrap font-bold ${textColorClass}">${item.kategori}</td>
            <td class="px-6 py-4 whitespace-nowrap">
                <button onclick="deleteRecord(${item.id})" class="text-red-500 hover:text-red-700">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                </button>
            </td>
        `;
        tableBody.appendChild(row);
    });
}

// Format date to dd/mm/yyyy hh:mm
function formatDate(dateString) {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${day}/${month}/${year} ${hours}:${minutes}`;
}

// Delete BMI record
function deleteRecord(id) {
    showConfirmModal('Konfirmasi', 'Apakah Anda yakin ingin menghapus data ini?', function() {
        $.ajax({
            url: 'api/delete_bmi.php',
            type: 'POST',
            data: { id: id },
            success: function(response) {
                try {
                    const result = JSON.parse(response);
                    if (result.status === 'success') {
                        showModal('Sukses', 'Data berhasil dihapus.');
                        loadBMIHistory();
                    } else {
                        showModal('Error', result.message || 'Gagal menghapus data.');
                    }
                } catch (e) {
                    showModal('Error', 'Terjadi kesalahan pada server.');
                }
            },
            error: function() {
                showModal('Error', 'Gagal terhubung ke server.');
            }
        });
    });
}

// Show modal with message
function showModal(title, message, onConfirm = null) {
    document.getElementById('modalTitle').textContent = title;
    document.getElementById('modalBody').innerHTML = message;
    document.getElementById('modalContainer').classList.remove('hidden');
    
    // Setup callback if provided
    if (onConfirm) {
        document.getElementById('modalConfirm').onclick = function() {
            onConfirm();
            closeModal();
        };
    } else {
        document.getElementById('modalConfirm').onclick = closeModal;
    }
    
    // Hide cancel button if no callback
    document.getElementById('modalCancel').classList.add('hidden');
}

// Show confirmation modal with Yes/No options
function showConfirmModal(title, message, onConfirm) {
    document.getElementById('modalTitle').textContent = title;
    document.getElementById('modalBody').innerHTML = message;
    document.getElementById('modalContainer').classList.remove('hidden');
    
    // Setup confirm button
    document.getElementById('modalConfirm').textContent = 'Ya';
    document.getElementById('modalConfirm').onclick = function() {
        onConfirm();
        closeModal();
    };
    
    // Show and setup cancel button
    document.getElementById('modalCancel').classList.remove('hidden');
    document.getElementById('modalCancel').textContent = 'Tidak';
}

// Close modal
function closeModal() {
    document.getElementById('modalContainer').classList.add('hidden');
    document.getElementById('modalConfirm').textContent = 'OK';
    document.getElementById('modalCancel').classList.add('hidden');
}


